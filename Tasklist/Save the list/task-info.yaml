type: edu
files:
- name: src/tasklist/Main.kt
  visible: true
  text: |
    package tasklist

    fun main() {

        val taskList = TaskList()

        while (true) {
            println("Input an action (add, print, end):")

            when (readln().trim().lowercase()) {
                "add" -> taskList.addTask()
                "print" -> taskList.printTasks()
                "end" -> break
                else -> println("The input action is invalid")
            }
        }

        println("Tasklist exiting!")

    }

    class TaskList {

        private val tasks = mutableListOf<List<String>>()

        fun addTask() {
            println("Input a new task (enter a blank line to end):")

            val taskLines = generateSequence { readln() }
                .map { it.trim() }
                .takeWhile { it != "" }
                .toList()

            if (taskLines.isEmpty()) {
                println("The task is blank")
            } else {
                tasks.add(taskLines)
            }
        }

        fun printTasks() {
            if (tasks.isEmpty()) {
                println("No tasks have been input")
            } else {
                tasks.forEachIndexed { index, strings ->
                    println("%-2d %s".format(index + 1, strings[0]))
                    for (idx in 1..strings.lastIndex) {
                        println("   %s".format(strings[idx]))
                    }
                    println()
                }
            }
        }

    }
  learner_created: false
- name: test/TasklistTest.kt
  visible: false
  text: |+
    import com.google.gson.JsonElement
    import kotlinx.datetime.*
    import org.hyperskill.hstest.common.JsonUtils
    import org.hyperskill.hstest.common.JsonUtils.getJson
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import org.hyperskill.hstest.testing.expect.Expectation.expect
    import org.hyperskill.hstest.testing.expect.json.JsonChecker.*
    import java.io.File

    class TasklistTest : StageTest<Any>() {
        // Wrong task input
        @DynamicTest(order = 1)
        fun tasklistTest28(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val inputStrings = listOf("input", "task", "",  "123", " ")
            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
            for (s in inputStrings) {
                if (!co.input(s, "The input action is invalid"))
                    return CheckResult(false, "Your output should contain \"The input action is invalid\"")
                if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                    return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
            }

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Wrong priority is input
        @DynamicTest(order = 2)
        fun tasklistTest29(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val inputStrings = listOf("normal", "Critical", "low",  "high", " ")
            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("add", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")

            for (s in inputStrings) {
                if (!co.input(s, "Input the task priority (C, H, N, L):"))
                    return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            }

            if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Wrong date is input
        @DynamicTest(order = 3)
        fun tasklistTest30(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val inputStrings = listOf("2021-2-29", "2021-13-1", "2021-12-32",  "thisDay", " ")
            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("add", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")

            for (s in inputStrings) {
                if (!co.input(s, "The input date is invalid"))
                    return CheckResult(false, "Your output should contain \"The input date is invalid\"")
                if (!co.inputNext("Input the date (yyyy-mm-dd):"))
                    return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            }

            if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Wrong time is input
        @DynamicTest(order = 4)
        fun tasklistTest31(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val inputStrings = listOf("24:00", "12:60", "12.12",  "thisTime", " ")
            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("add", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")

            for (s in inputStrings) {
                if (!co.input(s, "The input time is invalid"))
                    return CheckResult(false, "Your output should contain \"The input time is invalid\"")
                if (!co.inputNext("Input the time (hh:mm):"))
                    return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            }

            if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Blank task is input
        @DynamicTest(order = 5)
        fun tasklistTest32(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("add", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("     ", "The task is blank"))
                return CheckResult(false, "Your output should contain \"The task is blank\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // No tasks have been input
        @DynamicTest(order = 6)
        fun tasklistTest33(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val inputStrings = listOf("print", "edit", "delete")
            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            for (s in inputStrings) {
                if (!co.input(s, "No tasks have been input"))
                    return CheckResult(false, "Your output should contain \"No tasks have been input\"")
                if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                    return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\""
                    )
            }

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Normal task addition
        @DynamicTest(order = 7)
        fun tasklistTest34(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val now = Clock.System.now()
            val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
            val sameDay = currentDate.toString()
            val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
            val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()

            val inputStrings = arrayListOf(
                arrayOf("C", sameDay, "17:00", "See my dentist\n\n"),
                arrayOf("h", daysAfter, "17:00", "Cinema: get tickets\nCheck movie reviews\n\n"),
                arrayOf("n", daysBefore, "19:00", "Supermarket\nChocolates\nflour\noranges\n\n",),
                arrayOf("l", daysAfter, "12:00", "Buy book\n\n")
            )

            val outputStrings = arrayListOf(
                arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                    "|    |            |       |   |   |Check movie reviews                         |"),
                arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                    "|    |            |       |   |   |Chocolates                                  |",
                    "|    |            |       |   |   |flour                                       |",
                    "|    |            |       |   |   |oranges                                     |"),
                arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
            )

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            for (taskInput in inputStrings) {
                if (!co.input("add", "Input the task priority (C, H, N, L):"))
                    return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                    return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                    return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                    return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                    return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
            }

            co.getNextOutput("print")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            for (s in outputStrings) {
                if (!co.inputNext(*s)) {
                    val str = StringBuilder()
                    s.forEach { str.appendLine(it) }
                    return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                }
                if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                    return CheckResult(false, "Wrong dividing line." +
                            "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            }
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Tasks deletion
        @DynamicTest(order = 8)
        fun tasklistTest35(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val now = Clock.System.now()
            val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
            val sameDay = currentDate.toString()
            val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
            val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()

            val inputStrings = arrayListOf(
                arrayOf("N", daysAfter, "17:00", "Cinema: get tickets\n\n"),
                arrayOf("l", daysBefore, "12:00", "Buy book\n\n")
            )

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            for (taskInput in inputStrings) {
                if (!co.input("add", "Input the task priority (C, H, N, L):"))
                    return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                    return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                    return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                    return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                    return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
            }

            co.getNextOutput("delete")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            if (!co.inputNext("| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")

            if (!co.inputNext("Input the task number (1-2):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-2):\"")

            if (!co.input("1", "The task is deleted"))
                return CheckResult(false, "Your output should contain \"The task is deleted\"")

            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("delete")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")

            if (!co.inputNext("Input the task number (1-1):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-2):\"")

            if (!co.input("1", "The task is deleted"))
                return CheckResult(false, "Your output should contain \"The task is deleted\"")

            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("delete", "No tasks have been input"))
                return CheckResult(false, "Your output should contain \"No tasks have been input\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("print", "No tasks have been input"))
                return CheckResult(false, "Your output should contain \"No tasks have been input\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Task editing
        @DynamicTest(order = 9)
        fun tasklistTest36(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("add", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            if (!co.input("2000-1-1", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("My task\n\n", "Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("edit")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            if (!co.inputNext("Input the task number (1-1):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
            if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")

            if (!co.input("priority", "Input the task priority (C, H, N, L):"))
                return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
            if (!co.input("H", "The task is changed"))
                return CheckResult(false, "Your output should contain \"The task is changed\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("edit")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            if (!co.inputNext("Input the task number (1-1):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
            if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")


            if (!co.input("date", "Input the date (yyyy-mm-dd):"))
                return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
            if (!co.input("2001-2-2", "The task is changed"))
                return CheckResult(false, "Your output should contain \"The task is changed\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("edit")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | 2001-02-02 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | 2001-02-02 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            if (!co.inputNext("Input the task number (1-1):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
            if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")

            if (!co.input("time", "Input the time (hh:mm):"))
                return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
            if (!co.input("12:34", "The task is changed"))
                return CheckResult(false, "Your output should contain \"The task is changed\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("edit")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            if (!co.inputNext("Input the task number (1-1):"))
                return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
            if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                return CheckResult(false, "Your output should contain \"The task is deleted\nInput a field to edit (priority, date, time, task):\"")

            if (!co.input("task", "Input a new task (enter a blank line to end):"))
                return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
            if (!co.input("My new task\n\n", "The task is changed"))
                return CheckResult(false, "Your output should contain \"The task is changed\"")
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("print")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |"))
                return CheckResult(false, "Your output should contain" +
                        " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |\"")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Wrong dividing line." +
                        "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")

            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")
            return CheckResult.correct()
        }

        // Check JSON file saving
        @DynamicTest(order = 10)
        fun tasklistTest37(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (jsonFile.exists()) jsonFile.delete()
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to delete a JSON file.")
            }

            val now = Clock.System.now()
            val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
            val sameDay = currentDate.toString()
            val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
            val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()

            val inputStrings = arrayListOf(
                arrayOf("C", sameDay, "17:00", "See my dentist\n\n"),
                arrayOf("h", daysAfter, "17:00", "Cinema: get tickets\nCheck movie reviews\n\n"),
                arrayOf("n", daysBefore, "19:00", "Supermarket\nChocolates\nflour\noranges\n\n",),
                arrayOf("l", daysAfter, "12:00", "Buy book\n\n")
            )

            val outputStrings = arrayListOf(
                arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                    "|    |            |       |   |   |Check movie reviews                         |"),
                arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                    "|    |            |       |   |   |Chocolates                                  |",
                    "|    |            |       |   |   |flour                                       |",
                    "|    |            |       |   |   |oranges                                     |"),
                arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
            )

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            for (taskInput in inputStrings) {
                if (!co.input("add", "Input the task priority (C, H, N, L):"))
                    return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                    return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                    return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                    return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                    return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
            }

            co.getNextOutput("print")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            for (s in outputStrings) {
                if (!co.inputNext(*s)) {
                    val str = StringBuilder()
                    s.forEach { str.appendLine(it) }
                    return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                }
                if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                    return CheckResult(false, "Wrong dividing line." +
                            "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            }
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")

            try {
                val jsonFile = File("tasklist.json")
                if (!jsonFile.exists())
                    return CheckResult(false, "The file tasklist.json hasn't been created, after the end action.")
                val jsonText = jsonFile.readText()
                if (jsonText.isBlank())
                    return CheckResult(false, "The file tasklist.json is blank.")
                val t = JsonUtils.getType(getJson(jsonText))
                if (t != "array")
                    return CheckResult(false, "Wrong JSON format. JSON string is not an array.")
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to check if a file exists.")
            }

            return CheckResult.correct()
        }

        // Check JSON file loading
        @DynamicTest(order = 11)
        fun tasklistTest38(): CheckResult {
            try {
                val jsonFile = File("tasklist.json")
                if (!jsonFile.exists())
                    return CheckResult(false, "The file tasklist.json doesn't exist.")
                val jsonText = jsonFile.readText()
                if (jsonText.isBlank())
                    return CheckResult(false, "The file tasklist.json is blank.")
                val t = JsonUtils.getType(getJson(jsonText))
                if (t != "array")
                    return CheckResult(false, "Wrong JSON format. JSON string is not an array.")
            } catch (e: Exception) {
                return CheckResult(false, "An exception was thrown, while trying to check if a file exists.")
            }

            val now = Clock.System.now()
            val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
            val sameDay = currentDate.toString()
            val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
            val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()

            val outputStrings = arrayListOf(
                arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                    "|    |            |       |   |   |Check movie reviews                         |"),
                arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                    "|    |            |       |   |   |Chocolates                                  |",
                    "|    |            |       |   |   |flour                                       |",
                    "|    |            |       |   |   |oranges                                     |"),
                arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
            )

            val co = CheckOutput()
            if ( !co.start("Input an action (add, print, edit, delete, end):") )
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            co.getNextOutput("print")
            if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                    "| N  |    Date    | Time  | P | D |                   Task                     |",
                    "+----+------------+-------+---+---+--------------------------------------------+"))
                return CheckResult(false, "Your output header isn't correct\"")
            for (s in outputStrings) {
                if (!co.inputNext(*s)) {
                    val str = StringBuilder()
                    s.forEach { str.appendLine(it) }
                    return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                }
                if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                    return CheckResult(false, "Wrong dividing line." +
                            "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
            }
            if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")

            if (!co.input("end", "Tasklist exiting!"))
                return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")

            if (!co.programIsFinished() )
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }
    }

    class CheckOutput {
        private var main: TestedProgram = TestedProgram()
        var position = 0
        private var caseInsensitive = true
        private var trimOutput = true
        private val arguments= mutableListOf<String>()
        private var isStarted = false
        private var lastOutput = ""

        private fun checkOutput(outputString: String, vararg checkStr: String): Boolean {
            var searchPosition = position
            for (cStr in checkStr) {
                val str = if (caseInsensitive) cStr.lowercase() else cStr
                val findPosition = outputString.indexOf(str, searchPosition)
                if (findPosition == -1) return false
                if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return false
                searchPosition = findPosition + str.length
            }
            position = searchPosition
            return true
        }

        fun start(vararg checkStr: String): Boolean {
            return if (!isStarted) {
                var outputString = main.start(*arguments.toTypedArray())
                lastOutput = outputString
                if (trimOutput) outputString = outputString.trim()
                if (caseInsensitive) outputString = outputString.lowercase()
                isStarted = true
                checkOutput(outputString, *checkStr)
            } else false
        }

        fun stop() {
            main.stop()
        }

        fun input(input: String, vararg checkStr: String): Boolean {
            if (main.isFinished) return false
            var outputString = main.execute(input)
            lastOutput = outputString
            if (trimOutput) outputString = outputString.trim()
            if (caseInsensitive) outputString = outputString.lowercase()
            position = 0
            return checkOutput(outputString, *checkStr)
        }

        fun inputNext(vararg checkStr: String): Boolean {
            var outputString = lastOutput
            if (trimOutput) outputString = outputString.trim()
            if (caseInsensitive) outputString = outputString.lowercase()
            return checkOutput(outputString, *checkStr)
        }

        fun getNextOutput(input: String): String {
            if (main.isFinished) return ""
            val outputString = main.execute(input)
            lastOutput = outputString
            position = 0
            return  outputString
        }

        fun getLastOutput(): String { return lastOutput }
        fun programIsFinished(): Boolean  = main.isFinished
        fun setArguments(vararg args: String) { arguments.addAll(args.toMutableList()) }
        fun setCaseSensitivity(caseInsensitive: Boolean) { this.caseInsensitive = caseInsensitive }
        fun setOutputTrim(trimOutput: Boolean) { this.trimOutput = trimOutput}
    }


  learner_created: false
- name: src/tasklist/TaskPriority.kt
  visible: true
  text: |
    package tasklist

    enum class TaskPriority(val ansiCode: String) {
        C("\u001B[101m \u001B[0m"),
        H("\u001B[103m \u001B[0m"),
        N("\u001B[102m \u001B[0m"),
        L("\u001B[104m \u001B[0m")
    }
  learner_created: true
- name: src/tasklist/Column.kt
  visible: true
  text: |-
    package tasklist

    data class Column(val width: Int, val title: String)
  learner_created: true
- name: src/tasklist/TaskList.kt
  visible: true
  text: |
    package tasklist

    import kotlinx.datetime.LocalDate
    import java.time.LocalTime
    import kotlin.math.max

    class TaskList {

        private val columns = listOf(
            Column(4, "N"),
            Column(12, "Date"),
            Column(7, "Time"),
            Column(3, "P"),
            Column(3, "D"),
            Column(44, "Task  "),
        )

        private val separatingLine: String = columns.joinToString("+", "+", "+") { "-".repeat(it.width) }

        private val tasks = mutableListOf<Task>()

        fun addTask() {

            val priority = readTaskPriority()
            val deadlineDate = readDeadlineDate()
            val deadlineTime = readDeadlineTime()
            val taskLines = readTaskLines()

            if (taskLines.isEmpty()) {
                println("The task is blank")
            } else {
                tasks.add(Task(taskLines, priority, deadlineDate, deadlineTime))
            }
        }

        fun printTasks() {
            if (tasks.isEmpty()) {
                println("No tasks have been input")
            } else {
                println(separatingLine)
                println(columns.joinToString("|", "|", "|") {
                    cellFormat(it.title, it.width)
                })
                println(separatingLine)
                tasks.flatMapIndexed { index, task ->
                    buildList {

                    }
                }.forEach(::println)
            }
        }

        private fun cellFormat(value: String, width: Int, center: Boolean = true): String {
            val spaceStart = if (center) max((width - value.length) / 2, 1) else 0
            val spaceEnd = max(width - spaceStart - value.length, if (center) 1 else 0)
            return " ".repeat(spaceStart) + value + " ".repeat(spaceEnd)
        }

        fun editTask() {
            printTasks()
            if (tasks.isNotEmpty()) {
                val taskNumber = readTaskNumber()
                val taskField = readTaskField()
                val task = tasks[taskNumber]
                tasks[taskNumber] = when (taskField) {
                    TaskField.PRIORITY -> task.copy(priority = readTaskPriority())
                    TaskField.DATE -> task.copy(deadlineDate = readDeadlineDate())
                    TaskField.TIME -> task.copy(deadlineTime = readDeadlineTime())
                    TaskField.TASK -> task.copy(lines = readTaskLines())
                }
                println("The task is changed")
            }
        }

        fun deleteTask() {
            printTasks()
            if (tasks.isNotEmpty()) {
                val taskNumber = readTaskNumber()
                tasks.removeAt(taskNumber)
                println("The task is deleted")
            }
        }

        private fun readTaskPriority(): TaskPriority =
            read("Input the task priority (C, H, N, L):", null) { TaskPriority.valueOf(readln().uppercase()) }

        private fun readDeadlineDate(): String = read("Input the date (yyyy-mm-dd):", "The input date is invalid") {
            val dateParts = readln().split("-")
            require(dateParts.size == 3)
            LocalDate(dateParts[0].toInt(), dateParts[1].toInt(), dateParts[2].toInt()).toString()
        }

        private fun readDeadlineTime(): String = read("Input the time (hh:mm):", "The input time is invalid") {
            val timeParts = readln().split(":")
            require(timeParts.size == 2)
            LocalTime.of(timeParts[0].toInt(), timeParts[1].toInt()).toString()
        }

        private fun readTaskLines(): List<String> {
            println("Input a new task (enter a blank line to end):")

            return generateSequence { readln() }
                .map { it.trim() }
                .takeWhile { it != "" }
                .toList()
        }

        private fun readTaskNumber(): Int = read("Input the task number (1-${tasks.size}):", "Invalid task number") {
            readln().toInt().also { require(it in 1..tasks.size) } - 1
        }

        private fun readTaskField(): TaskField =
            read("Input a field to edit (priority, date, time, task):", "Invalid field") {
                TaskField.valueOf(readln().uppercase())
            }

        private fun <T> read(prompt: String, errorMessage: String?, block: () -> T): T {
            while (true) {
                println(prompt)
                try {
                    return block()
                } catch (e: Exception) {
                    errorMessage?.also { println(it) }
                }
            }
        }

    }
  learner_created: true
- name: src/tasklist/DueTag.kt
  visible: true
  text: |-
    package tasklist

    enum class DueTag(val ansiCode: String) {
        I("\u001B[102m \u001B[0m"),
        T("\u001B[103m \u001B[0m"),
        O("\u001B[101m \u001B[0m")
    }
  learner_created: true
- name: src/tasklist/TaskField.kt
  visible: true
  text: |-
    package tasklist

    enum class TaskField {

        PRIORITY,
        DATE,
        TIME,
        TASK

    }
  learner_created: true
- name: src/tasklist/Task.kt
  visible: true
  text: |
    package tasklist

    import kotlinx.datetime.*

    data class Task(
        val lines: List<String>,
        val priority: TaskPriority,
        val deadlineDate: String,
        val deadlineTime: String
    ) {
        val dueTag: DueTag
            get() = Clock.System.now()
                .toLocalDateTime(TimeZone.of("UTC+0"))
                .date
                .daysUntil(deadlineDate.toLocalDate())
                .let {
                    when {
                        it < 0 -> DueTag.O
                        it == 0 -> DueTag.T
                        else -> DueTag.I
                    }
                }

    }
  learner_created: true
- name: tasklist.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18599#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Fri, 25 Nov 2022 08:49:33 UTC"
record: -1
